const downloadExcel = () => {
  // Fetch API data
  fetch('https://api.example.com/data')
    .then(response => response.json())
    .then(data => {
      // Select desired columns from API data
      const selectedColumns = data.map(item => {
        return {
          id: item.id,
          name: item.name,
          // Add more properties as needed
        };
      });

      // Create a new workbook
      const workbook = XLSX.utils.book_new();

      // Convert the selectedColumns data to a worksheet
      const worksheet = XLSX.utils.json_to_sheet(selectedColumns);

      // Apply styles for header row
      const headerStyle = { fill: { fgColor: { rgb: 'FFFF0000' } } };
      XLSX.utils.sheet_add_json(worksheet, [selectedColumns[0]], { skipHeader: true, origin: 'A1' });
      XLSX.utils.sheet_set_range_style(worksheet, 'A1', headerStyle);

      // Apply styles for body rows
      const bodyStyleEven = { fill: { fgColor: { rgb: 'FFC0C0C0' } } };
      const bodyStyleOdd = { fill: { fgColor: { rgb: 'FFFFFFFF' } } };
      for (let row = 1; row < selectedColumns.length; row++) {
        const style = row % 2 === 0 ? bodyStyleEven : bodyStyleOdd;
        XLSX.utils.sheet_set_range_style(worksheet, `A${row + 1}`, style);
      }

      // Add the worksheet to the workbook
      XLSX.utils.book_append_sheet(workbook, worksheet, 'Sheet 1');

      // Convert the workbook to an Excel file buffer
      const excelBuffer = XLSX.write(workbook, {
        bookType: 'xlsx',
        type: 'array',
      });

      // Create a Blob from the buffer
      const blob = new Blob([excelBuffer], {
        type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
      });

      // Save the file using FileSaver.js
      saveAs(blob, 'api_data.xlsx');
    })
    .catch(error => {
      console.error('Error:', error);
    });
};
